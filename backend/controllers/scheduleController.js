const mongoose = require("mongoose");
const Schedule = require("../models/Schedule");

// üìå L·∫•y th·ªùi kh√≥a bi·ªÉu theo classId
exports.getScheduleByClassId = async (req, res) => {
    try {
        const { classId } = req.params;
        if (!mongoose.Types.ObjectId.isValid(classId)) {
            return res.status(400).json({ error: "classId kh√¥ng h·ª£p l·ªá" });
        }
        const schedules = await Schedule.find({ classId });
        res.json(schedules);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// üìå Th√™m th·ªùi kh√≥a bi·ªÉu m·ªõi (cho t·ª´ng ng√†y)
exports.createSchedule = async (req, res) => {
    try {
        const { classId, day, sessions } = req.body;

        if (!mongoose.Types.ObjectId.isValid(classId)) {
            return res.status(400).json({ error: "classId kh√¥ng h·ª£p l·ªá" });
        }

        const newSchedule = new Schedule({ classId, day, sessions });

        await newSchedule.save();
        res.status(201).json(newSchedule);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
};

// üìå C·∫≠p nh·∫≠t th·ªùi kh√≥a bi·ªÉu theo ID
exports.updateSchedule = async (req, res) => {
    try {
        const { id } = req.params;
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ error: "Schedule ID kh√¥ng h·ª£p l·ªá" });
        }

        const updatedSchedule = await Schedule.findByIdAndUpdate(id, req.body, { new: true });

        if (!updatedSchedule) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y th·ªùi kh√≥a bi·ªÉu" });
        }

        res.json(updatedSchedule);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
};

// üìå X√≥a th·ªùi kh√≥a bi·ªÉu theo ID
exports.deleteSchedule = async (req, res) => {
    try {
        const { id } = req.params;
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ error: "Schedule ID kh√¥ng h·ª£p l·ªá" });
        }

        const deletedSchedule = await Schedule.findByIdAndDelete(id);
        if (!deletedSchedule) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y th·ªùi kh√≥a bi·ªÉu" });
        }

        res.json({ message: "X√≥a th√†nh c√¥ng" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};
