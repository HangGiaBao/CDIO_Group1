const express = require("express");
const { body, validationResult } = require("express-validator");
const router = express.Router();
const Class = require("../models/classModel");

// üìå 1. L·∫•y danh s√°ch t·∫•t c·∫£ l·ªõp h·ªçc
router.get("/", async (req, res) => {
    try {
        const classes = await Class.find();
        res.json(classes);
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch l·ªõp h·ªçc:", error);
        res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch l·ªõp h·ªçc" });
    }
});

// üìå 2. L·∫•y th√¥ng tin m·ªôt l·ªõp h·ªçc theo ID
router.get("/:id", async (req, res) => {
    try {
        const classItem = await Class.findById(req.params.id);
        if (!classItem) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc" });
        res.json(classItem);
    } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin l·ªõp h·ªçc:", error);
        res.status(500).json({ error: "L·ªói khi l·∫•y th√¥ng tin l·ªõp h·ªçc" });
    }
});

// üìå 3. T·∫°o l·ªõp h·ªçc m·ªõi
router.post(
    "/",
    body("name").notEmpty().withMessage("T√™n l·ªõp h·ªçc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

        try {
            const { name, students = [] } = req.body;
            const newClass = new Class({ name, students });
            await newClass.save();
            res.status(201).json(newClass);
        } catch (error) {
            console.error("L·ªói khi t·∫°o l·ªõp h·ªçc:", error);
            res.status(500).json({ error: "L·ªói khi t·∫°o l·ªõp h·ªçc" });
        }
    }
);

// üìå 4. C·∫≠p nh·∫≠t th√¥ng tin l·ªõp h·ªçc
router.put("/:id", async (req, res) => {
    try {
        const updatedClass = await Class.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!updatedClass) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc" });
        res.json(updatedClass);
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t l·ªõp h·ªçc:", error);
        res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t l·ªõp h·ªçc" });
    }
});

// üìå 5. X√≥a l·ªõp h·ªçc
router.delete("/:id", async (req, res) => {
    try {
        const deletedClass = await Class.findByIdAndDelete(req.params.id);
        if (!deletedClass) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc" });
        res.json({ message: "L·ªõp h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a" });
    } catch (error) {
        console.error("L·ªói khi x√≥a l·ªõp h·ªçc:", error);
        res.status(500).json({ error: "L·ªói khi x√≥a l·ªõp h·ªçc" });
    }
});

// üìå 6. Th√™m h·ªçc sinh v√†o l·ªõp
router.post(
    "/:id/students",
    [
        body("name").notEmpty().withMessage("T√™n h·ªçc sinh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
        body("age").isInt({ min: 3 }).withMessage("Tu·ªïi ph·∫£i l√† s·ªë nguy√™n v√† l·ªõn h∆°n 3"),
    ],
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

        try {
            const classItem = await Class.findById(req.params.id);
            if (!classItem) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc" });

            classItem.students.push(req.body);
            await classItem.save();
            res.json(classItem);
        } catch (error) {
            console.error("L·ªói khi th√™m h·ªçc sinh:", error);
            res.status(500).json({ error: "L·ªói khi th√™m h·ªçc sinh" });
        }
    }
);

// üìå 7. X√≥a h·ªçc sinh kh·ªèi l·ªõp
router.delete("/:classId/students/:studentId", async (req, res) => {
    try {
        const classItem = await Class.findById(req.params.classId);
        if (!classItem) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc" });

        classItem.students = classItem.students.filter(student => student._id.toString() !== req.params.studentId);
        await classItem.save();
        res.json(classItem);
    } catch (error) {
        console.error("L·ªói khi x√≥a h·ªçc sinh:", error);
        res.status(500).json({ error: "L·ªói khi x√≥a h·ªçc sinh kh·ªèi l·ªõp" });
    }
});

// üìå 8. C·∫≠p nh·∫≠t th√¥ng tin h·ªçc sinh
router.put("/:classId/students/:studentId", async (req, res) => {
    try {
        const classItem = await Class.findById(req.params.classId);
        if (!classItem) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc" });

        const student = classItem.students.id(req.params.studentId);
        if (!student) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y h·ªçc sinh" });

        Object.assign(student, req.body);
        await classItem.save();
        res.json({ message: "C·∫≠p nh·∫≠t h·ªçc sinh th√†nh c√¥ng", student });
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t h·ªçc sinh:", error);
        res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t h·ªçc sinh" });
    }
});

module.exports = router;
